openapi: 3.1.0
info:
  version: '1.0'
  title: EDD2023
servers:
  - url: 'http://localhost:3000/api'
  - url: 'https://shun.dev.host/api'
    description: ''
paths:
  /auth/signUp:
    post:
      summary: ''
      operationId: post-auth-signUp
      requestBody:
        $ref: '#/components/requestBodies/SignUp'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /auth/lineRegistration:
    post:
      summary: ''
      operationId: post-auth-lineRegistration
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        $ref: '#/components/requestBodies/LineRegistration'
      responses:
        '200':
          $ref: '#/components/responses/User'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /auth/idIsExists:
    post:
      summary: ''
      operationId: post-auth-idIsExists
      requestBody:
        $ref: '#/components/requestBodies/IdIsExists'
      responses:
        '200':
          $ref: '#/components/responses/IdIsExists'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /auth/signIn:
    post:
      summary: ''
      operationId: post-auth-signIn
      requestBody:
        $ref: '#/components/requestBodies/SignIn'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /auth/checkOtp:
    post:
      summary: ''
      operationId: post-auth-checkOtp
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        $ref: '#/components/requestBodies/CheckOtp'
      responses:
        '200':
          $ref: '#/components/responses/User'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /auth/signOut:
    post:
      summary: ''
      operationId: post-auth-signOut
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        $ref: '#/components/requestBodies/SignOut'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /user:
    get:
      summary: Your GET endpoint
      operationId: get-user
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          $ref: '#/components/responses/User'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /room:
    post:
      summary: ''
      operationId: post-game-createRoom
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        $ref: '#/components/requestBodies/CreateRoomRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /room/list:
    get:
      summary: Your GET endpoint
      operationId: get-room.list
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  rooms:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /room/join:
    post:
      summary: ''
      operationId: post-room-join
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        $ref: '#/components/requestBodies/JoinRoomRequest'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/gamePhase:
    get:
      summary: ''
      operationId: get-game-gamePhase
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  phase:
                    $ref: '#/components/schemas/Phase'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/phaseState:
    get:
      summary: Your GET endpoint
      operationId: get-game-phaseState
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phase:
                  $ref: '#/components/schemas/Phase'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  phase:
                    $ref: '#/components/schemas/Phase'
                  state:
                    anyOf:
                      - $ref: '#/components/schemas/WaitingPhaseState'
                      - $ref: '#/components/schemas/GeneratePhaseState'
                      - $ref: '#/components/schemas/GuessPhaseState'
                      - $ref: '#/components/schemas/ShowScorePhaseState'
                      - $ref: '#/components/schemas/ShowCorrectAnswerPhaseState'
                      - $ref: '#/components/schemas/EndingPhaseState'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/start:
    post:
      summary: ''
      operationId: post-game-start
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/topic:
    get:
      summary: Your GET endpoint
      operationId: get-game-topic
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  topic:
                    $ref: '#/components/schemas/Topic'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/prompt:
    post:
      summary: ''
      operationId: post-game-prompt
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  generatedImageUrl:
                    type: string
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/answer:
    post:
      summary: ''
      operationId: post-game-answer
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  topic:
                    $ref: '#/components/schemas/Topic'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/showScore/next:
    post:
      summary: ''
      operationId: post-game-showScore-next
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/showScore/prev:
    post:
      summary: ''
      operationId: post-game-showScore-prev
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/showScore/end:
    post:
      summary: ''
      operationId: post-game-showScore-end
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/showCorrectAnswer/next:
    post:
      summary: ''
      operationId: post-game-showCorrectAnswer-next
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/nextRound:
    post:
      summary: ''
      operationId: post-game-nextRound
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/ending:
    post:
      summary: ''
      operationId: post-game-ending
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          description: OK
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
  /game/waiting:
    post:
      summary: ''
      operationId: post-game-waiting
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/GameSessionId'
      responses:
        '200':
          $ref: '#/components/responses/Message'
      servers:
        - url: 'http://localhost:3000/api'
        - url: 'https://shun.dev.host/api'
          description: ''
components:
  parameters:
    SessionId:
      name: sessionId
      in: cookie
      schema:
        type: string
        format: uuid
        examples:
          - 108aa900-2a17-4d0f-aa43-5d9f08e10340
    GameSessionId:
      name: gameSessionId
      in: cookie
      schema:
        type: string
        examples:
          - 108aa900-2a17-4d0f-aa43-5d9f08e10340
  requestBodies:
    SignUp:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              password:
                type: string
              iconImageUrl:
                type: string
    LineRegistration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OTP'
    SignIn:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              password:
                type: string
    IdIsExists:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
    CheckOtp:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OTP'
    SignOut:
      content:
        application/json:
          schema:
            type: object
    CreateRoomRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              password:
                type: string
              maxMember:
                type: number
    JoinRoomRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              password:
                type: string
  responses:
    Message:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    User:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    IdIsExists:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              isExists:
                type: boolean
  schemas:
    Room:
      type: object
      title: Room
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
        playerNum:
          type: number
        maxPlayerNum:
          type: number
        ownerPlayerId:
          type: string
    Phase:
      type: string
      title: Phase
    WaitingPhaseState:
      type: object
      title: WaitingPhaseState
      properties:
        roomInfo:
          $ref: '#/components/schemas/Room'
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
    Player:
      type: object
      title: Player
      properties:
        id:
          type: string
        name:
          type: string
        iconImageUrl:
          type: string
        '':
          type: string
    GeneratePhaseState:
      type: object
      title: GeneratePhaseState
      properties:
        playerStates:
          type: array
          items:
            $ref: '#/components/schemas/PlayerState'
        time:
          type: number
    PlayerState:
      type: object
      title: PlayerState
      properties:
        player:
          $ref: '#/components/schemas/Player'
        question:
          $ref: '#/components/schemas/Topic'
    Topic:
      type: object
      title: Topic
      properties:
        format:
          $ref: '#/components/schemas/Format'
        blanks:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        words:
          type: array
          items:
            type: string
    Format:
      type: string
      title: Format
    Genre:
      type: string
      title: Genre
    GuessPhaseState:
      type: object
      title: GuessPhaseState
      properties:
        playerStates:
          type: array
          items:
            $ref: '#/components/schemas/PlayerState'
        dealerPlayerId:
          type: string
        question:
          $ref: '#/components/schemas/GeneratedQuestionForGuess'
        time:
          type: number
    GeneratedQuestionForGuess:
      type: object
      title: GeneratedQuestionForGuess
      properties:
        topic:
          $ref: '#/components/schemas/TopicForGuess'
        resultImageUrl:
          type: string
    TopicForGuess:
      type: object
      title: TopicForGuess
      properties:
        format:
          $ref: '#/components/schemas/Format'
        blanks:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
    ShowScorePhaseState:
      type: object
      title: ShowScorePhaseState
      properties:
        playerStates:
          $ref: '#/components/schemas/PlayerState'
        dealerPlayerId:
          type: string
        showingPlayerId:
          type: string
        question:
          $ref: '#/components/schemas/GeneratedQuestionForGuess'
        playerAnswer:
          $ref: '#/components/schemas/AnswerForQuestion'
    AnswerForQuestion:
      type: object
      title: AnswerForQuestion
      properties:
        dealerPlayerId:
          type: string
        questionImageUrl:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
    Answer:
      type: object
      title: Answer
      properties:
        player:
          $ref: '#/components/schemas/Player'
        blankAnswers:
          type: array
          items:
            type: string
        score:
          type: number
    ShowCorrectAnswerPhaseState:
      type: object
      title: ShowCorrectAnswerPhaseState
      properties:
        question:
          $ref: '#/components/schemas/GeneratedQuestion'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        dealerScore:
          type: number
    GeneratedQuestion:
      type: object
      title: GeneratedQuestion
      properties:
        player:
          $ref: '#/components/schemas/Player'
        topic:
          $ref: '#/components/schemas/Topic'
        prompt:
          type: string
        resultImageUrl:
          type: string
    EndingPhaseState:
      type: object
      title: EndingPhaseState
      properties:
        ranking:
          type: array
          items:
            $ref: '#/components/schemas/PlayerState'
    OTP:
      type: object
      title: OTP
      properties:
        otp:
          type: string
          examples:
            - '123456'
    User:
      type: object
      title: User
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
          examples:
            - demoko123
        name:
          type: string
          examples:
            - demoko
        password:
          type: string
          examples:
            - demoko
        lineUid:
          type: string
        iconImageUrl:
          type: string
        '':
          type: string
      required:
        - id
        - name
        - password
        - lineUid
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
